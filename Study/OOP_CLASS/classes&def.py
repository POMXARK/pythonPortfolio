class PointWithInit:

    def __init__(self,x=0,y=0): # указываются все новые агрументы из __init__  . чтобы избежать ошибки x=0,y=0 используюеся значение по умолчанию если атрибут не задан
        print("__init__ вызывается (исполняется) каждый раз при создании экземпляра класса")
        self.x = x
        self.y = y

    def __del__(self):
        print("Удаление экземпляра :" + self.__str__())

    x = 1;
    y = 1

class Point:
    "Класс для представления кординатов точек на плоскости" # описание класса

    x=1;y=1
    def setPrint(self):
        print(self.__dict__)

    def setCoords(self,x,y): # x,y обязательные атрибуты метода
        self.x = x # присвоить базовый атрибут к новому (взять его тип?) (локальный атрибут ЭкземпляраКласса)
        self.y = y

    def setCoords_2(self,x,y): # x,y обязательные атрибуты метода
        self.a = x # присвоить базовый атрибут к новому (взять его тип?) (локальный атрибут ЭкземпляраКласса)
        self.b = y

# метод(self) -- self , чтобы узнать из какого конкретно экземпляра класса был вызван метод

pt2 = PointWithInit(25,50) # нужно указывать обязательные аргументы определенные в _init__
print(pt2.__dict__)
pt = Point() # При создании ЭкземпляраКласса сначала выполняется __init__ базового класса

pt2 = PointWithInit() # нужно указывать обязательные аргументы определенные в _init__ , атрибут не задан используется значение по умолчанию
print(pt2.__dict__)

pt = Point() # При создании ЭкземпляраКласса сначала выполняется __init__ базового класса



pt.x = 5
pt.y = 10
pt.setPrint() # в пустых скобках  self = Экземпляр класса, потому что указан pt
pt.setCoords(15,20)
Point.setCoords(pt,25,25) # Эквивалент pt.setCoords(15,20) # при указании базового класса с методом требуется указать ЭкземплярКласса в скобках
print(pt.__dict__)
pt.setCoords_2(145,220) # метод создает новые локальные атрибуты
print(pt.__dict__)
print(Point.__dict__) # Значения в базовом классе не изменились

print('\nЗадание\n')

class Point3D:
    def __init__(self,x=0,y=0,z=0):
        self.x = x
        self.y = y
        self.z = z

    def kort(self):
        kort = (self.x,self.y,self.z)