# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
import cv2, imutils
import numpy as np


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(919, 523)
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(0, 0, 918, 521))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setMinimumSize(QtCore.QSize(0, 260))
        self.widget.setBaseSize(QtCore.QSize(121, 220))
        self.widget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setStyleSheet("border: 10px solid green;")  # обводка
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setText("")
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.widget_2 = QtWidgets.QWidget(self.widget)
        self.widget_2.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setMinimumSize(QtCore.QSize(900, 0))
        self.widget_2.setBaseSize(QtCore.QSize(0, 0))
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_1 = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_1.setObjectName("pushButton_1")
        self.horizontalLayout.addWidget(self.pushButton_1, 0, QtCore.Qt.AlignLeft|QtCore.Qt.AlignBottom)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget_2)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2, 0, QtCore.Qt.AlignLeft|QtCore.Qt.AlignBottom)
        spacerItem = QtWidgets.QSpacerItem(300, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.horizontalLayout_1 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_1.setSpacing(1)
        self.horizontalLayout_1.setObjectName("horizontalLayout_1")
        self.verticalLayout_1 = QtWidgets.QVBoxLayout()
        self.verticalLayout_1.setObjectName("verticalLayout_1")
        self.horizontalSlider_1 = QtWidgets.QSlider(self.widget_2)
        self.horizontalSlider_1.setMaximum(255)
        self.horizontalSlider_1.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_1.setObjectName("horizontalSlider_1")
        self.verticalLayout_1.addWidget(self.horizontalSlider_1)
        self.horizontalSlider_2 = QtWidgets.QSlider(self.widget_2)
        self.horizontalSlider_2.setMaximum(255)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.verticalLayout_1.addWidget(self.horizontalSlider_2)
        self.horizontalSlider_3 = QtWidgets.QSlider(self.widget_2)
        self.horizontalSlider_3.setMaximum(255)
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.verticalLayout_1.addWidget(self.horizontalSlider_3)
        self.horizontalSlider_4 = QtWidgets.QSlider(self.widget_2)
        self.horizontalSlider_4.setMaximum(255)
        self.horizontalSlider_4.setProperty("value", 255)
        self.horizontalSlider_4.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_4.setObjectName("horizontalSlider_4")
        self.verticalLayout_1.addWidget(self.horizontalSlider_4)
        self.horizontalSlider_5 = QtWidgets.QSlider(self.widget_2)
        self.horizontalSlider_5.setMaximum(255)
        self.horizontalSlider_5.setProperty("value", 255)
        self.horizontalSlider_5.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_5.setObjectName("horizontalSlider_5")
        self.verticalLayout_1.addWidget(self.horizontalSlider_5)
        self.horizontalSlider_6 = QtWidgets.QSlider(self.widget_2)
        self.horizontalSlider_6.setMaximum(255)
        self.horizontalSlider_6.setProperty("value", 255)
        self.horizontalSlider_6.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_6.setObjectName("horizontalSlider_6")
        self.verticalLayout_1.addWidget(self.horizontalSlider_6)
        self.horizontalLayout_1.addLayout(self.verticalLayout_1)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_1 = QtWidgets.QLabel(self.widget_2)
        self.label_1.setObjectName("label_1")
        self.verticalLayout_3.addWidget(self.label_1)
        self.label_2 = QtWidgets.QLabel(self.widget_2)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.widget_2)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_3.addWidget(self.label_3)
        self.label_4 = QtWidgets.QLabel(self.widget_2)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_3.addWidget(self.label_4)
        self.label_5 = QtWidgets.QLabel(self.widget_2)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_3.addWidget(self.label_5)
        self.label_6 = QtWidgets.QLabel(self.widget_2)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_3.addWidget(self.label_6)
        self.horizontalLayout_1.addLayout(self.verticalLayout_3)
        self.horizontalLayout.addLayout(self.horizontalLayout_1)
        self.verticalLayout_2.addWidget(self.widget_2, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignBottom)

        self.retranslateUi(Dialog)
        ##
        self.pushButton_1.clicked.connect(self.loadImage)#
        self.pushButton_2.clicked.connect(self.savePhoto)#
        ##
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        # Добавлен код сюда
        self.filename = None  # Будет содержать адрес изображения
        self.tmp = None  # Будет удерживать временное изображение для отображения

        self.horizontalSlider_1.valueChanged['int'].connect(self.h1) # передает значение value в функцию
        self.horizontalSlider_2.valueChanged['int'].connect(self.s1) # передает значение value в функцию
        self.horizontalSlider_3.valueChanged['int'].connect(self.v1) # передает значение value в функцию
        self.horizontalSlider_4.valueChanged['int'].connect(self.h2) # передает значение value в функцию
        self.horizontalSlider_5.valueChanged['int'].connect(self.s2) # передает значение value в функцию
        self.horizontalSlider_6.valueChanged['int'].connect(self.v2) # передает значение value в функци

    def loadImage(self):
        """ Эта функция загрузит выбранное пользователем изображение
             и установите для него метку с помощью функции setPhoto
        """
        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        self.image = cv2.imread(self.filename)
        self.setPhoto(self.image)
        try:
            self.height_img, self.width_img = self.image.shape[:2]
            print(self.height_img, self.width_img)
        except:
            pass

    def setPhoto(self, image):
        """ Эта функция принимает изображение и изменяет его размер.
             только для отображения и преобразовать его в QImage
             установить на этикетке.
        """
        self.tmp = image

        try:
            frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # №- нужно
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)

            self.hsv_image = cv2.imread('hsv.png')
            hsv_mask = self.hsv_image

            hsv_mask = QImage(hsv_mask, hsv_mask.shape[1], hsv_mask.shape[0], hsv_mask.strides[0],
                              QImage.Format_RGB888)
            self.label.setPixmap(QtGui.QPixmap.fromImage(hsv_mask))
        except:
            pass


    def h1(self, value=0):
        self.label_1.setText("h1 :" + str(value))  # 2 - изменяет значение ползунка изменяет текст надписи
        self.hsv_h1 = value
        self.update()  # вызов обновления экрана

    def s1(self, value=0):
        self.label_2.setText("s1 :" + str(value))  # 2 - изменяет значение ползунка изменяет текст надписи
        self.hsv_s1 = value
        self.update()  # вызов обновления экрана

    def v1(self, value=0):
        self.label_3.setText("v1 :" + str(value))  # 2 - изменяет значение ползунка изменяет текст надписи
        self.hsv_v1 = value
        self.update()  # вызов обновления экрана

    def h2(self, value=255):
        self.label_4.setText("h2 :" + str(value))  # 2 - изменяет значение ползунка изменяет текст надписи
        self.hsv_h2 = value
        self.update()  # вызов обновления экрана


    def s2(self, value=255):
        self.label_5.setText("s2 :" + str(value))  # 2 - изменяет значение ползунка изменяет текст надписи
        self.hsv_s2 = value
        self.update()  # вызов обновления экрана

    def v2(self, value=255):
        self.label_6.setText("v2 :" + str(value))  # 2 - изменяет значение ползунка изменяет текст надписи
        self.hsv_v2 = value
        self.update()  # вызов обновления экрана

    def update(self):
        try:
            h_min = np.array((self.hsv_h1, self.hsv_s1, self.hsv_v1), np.uint8)
        except AttributeError:
            self.hsv_h1 = 0
            self.hsv_s1 = 0
            self.hsv_v1 = 0
            self.hsv_h2 = 255
            self.hsv_s2 = 255
            self.hsv_v2 = 255
        """ Эта функция обновит фото в соответствии с
             текущие значения размытия и яркости и установите для фото метки.
             пременит маску hsv
        """

        # формируем начальный и конечный цвет фильтра
        self.h_min = np.array((self.hsv_h1, self.hsv_s1, self.hsv_v1), np.uint8)
        self.h_max = np.array((self.hsv_h2, self.hsv_s2, self.hsv_v2), np.uint8)

        # накладываем фильтр на кадр в модели HSV
        hsv_image = self.tmp
        try:
            thresh = cv2.cvtColor(hsv_image, cv2.COLOR_BGR2HSV)  # преобразовать для inRange
            thresh = cv2.inRange(thresh, self.h_min, self.h_max)
            cv2.imwrite('hsv.png', thresh)  # записать результат в картинку

            self.setPhoto(self.image)
        except:
            pass

    def savePhoto(self):
        """Эта функция сохранит изображение"""
        # здесь укажите имя выходного файла
        # допустим, мы хотим сохранить вывод как отметку времени
        # раскомментируйте две строки ниже

        # время импорта
        # filename = 'Snapshot' + str (time.strftime ("% Y-% b-% d at% H.% M.% S% p")) + '. png'

        # Или мы можем дать любое имя, например output.jpg или output.png
        # filename = 'Snapshot.png'

        # Или гораздо лучший вариант - позволить пользователю определять местоположение и расширение
        # используя файловый диалог.
        try:
            test= {'h_min': list(self.h_min), 'h_max': list(self.h_max)}
            print(test)
            #filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]

            #cv2.imwrite(filename, self.tmp)
            print('Изображение сохранено как:', self.filename)
        except:
            pass


    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton_1.setText(_translate("Dialog", "Открыть"))
        self.pushButton_2.setText(_translate("Dialog", "Сохранить"))
        self.label_1.setText(_translate("Dialog", "0"))
        self.label_2.setText(_translate("Dialog", "0"))
        self.label_3.setText(_translate("Dialog", "0"))
        self.label_4.setText(_translate("Dialog", "255"))
        self.label_5.setText(_translate("Dialog", "255"))
        self.label_6.setText(_translate("Dialog", "255"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
