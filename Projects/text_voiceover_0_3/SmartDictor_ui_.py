

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SmartDictor_.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from Projects.text_voiceover_0_3.SmaRT_Dictor import RunApp

from PyQt5.QtCore import *
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import pyqtSignal

from Projects.text_voiceover_0_3.voise import BaseVoiceOptions, VoiceOptions

import glob


"""

nuitka --mingw64  --follow-import-to=voise --follow-import-to=options --follow-import-to=Smart_Dictor --follow-import-to=edit_img --follow-import-to=show_img --follow-impo
rt-to=Detect_line --follow-import-to=MakeBorder --follow-import-to=Smart_cut --follow-import-to=For_tesseract  --follow-import-to=Npc_text  --follow-import-to=Detect_text --follow-import-to=Detect_dooble_img --follow-import-to=img_dia
log  --show-progress --follow-import-to=choice_of_voice_engine --follow-import-to=silero_speaker --follow-import-to=Say --windows-disable-console --follow-import-to=pitch_voise  SmartDictor_ui_.py


"""


"""

nuitka --mingw64  --follow-import-to=voise --follow-import-to=options --follow-import-to=Smart_Dictor --follow-import-to=edit_img --follow-import-to=show_img --follow-impo
rt-to=Detect_line --follow-import-to=MakeBorder --follow-import-to=Smart_cut --follow-import-to=For_tesseract  --follow-import-to=Npc_text  --follow-import-to=Detect_text --follow-import-to=Detect_dooble_img --follow-import-to=img_dia
log  --show-progress --follow-import-to=choice_of_voice_engine --follow-import-to=silero_speaker --follow-import-to=Say --windows-disable-console --follow-import-to=pitch_voise --follow-import-to=PyQt5 --follow-import-to=pytesseract--
follow-import-to=fuzzywuzzy --follow-import-to=Levenshtein --follow-import-to=pydub --follow-import-to=pydub.playback --follow-import-to=simpleaudio  --follow-import-to=matplotlib.pyplot --follow-import-to=pyaudio --follow-import-to=c
v2 --follow-import-to=cycler --follow-import-to=matplotlib --follow-import-to=numpy --follow-import-to=scipy --follow-import-to=PIL  --follow-import-to=setuptools  SmartDictor_ui_.py


"""

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(301, 152)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setMinimumSize(QtCore.QSize(240, 0))
        self.comboBox.setObjectName("comboBox")

        try:
            self.comboBox.addItems(txt)
        except NameError:
            txt = glob.glob('*.txt')

        self.comboBox.addItems(txt)
        #self.comboBox.addItems(["Ubuntu", "Mandriva",
         #               "Fedora", "Arch", "Gentoo"]) # добавить значения в список
        self.comboBox.activated[str].connect(self.onActivated)  # вызвать функцию при изминении текста в combo box

        self.verticalLayout.addWidget(self.comboBox)
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setObjectName("comboBox_2")
        speakers = ['aidar', 'baya', 'kseniya', 'irina', 'ruslan', 'natasha',
                    'thorsten', 'tux', 'gilles', 'lj', 'dilyara']
        base_opt = BaseVoiceOptions(speakers=speakers,voice_file='voise.txt',voice_opt_file='opt.txt')
        test = VoiceOptions(speakers=speakers,voice_file='voise.txt',voice_opt_file='opt.txt', min_speed='Минималья скорость', max_speed='Максимальная скорость',min_volume='Минимальная громкость', max_volume='Максимальная громкость')
        self.comboBox_2.addItems(test.find_voice()) # добавить значения в список # ИСПРАВИТЬ

        text = str(self.comboBox_2.currentText())
        #print(text)

        self.verticalLayout.addWidget(self.comboBox_2)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")

        # setting checkable to true
        self.pushButton.setCheckable(True)

        self.verticalLayout_3.addWidget(self.pushButton)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 301, 27))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



        self.pushButton.clicked.connect(self.dictor_start) # по клику кнопки

        voise_name = open('voise.txt')  # открыть файл
        voise_name = voise_name.read()  # прочитать
        index = self.comboBox_2.findText(voise_name, QtCore.Qt.MatchFixedString) # выбрать нужную строку с списке
        if index >= 0:
            self.comboBox_2.setCurrentIndex(index)
        self.comboBox_2.activated[str].connect(self.VoiceActivated)  # вызвать функцию при изминении текста в combo box

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SmartDictor"))
        self.label.setText(_translate("MainWindow", "Игра"))
        self.label_2.setText(_translate("MainWindow", "Голос"))
        self.pushButton.setText(_translate("MainWindow", "Запуск"))

    def VoiceActivated(self, text):
        speakers = ['aidar', 'baya', 'kseniya', 'irina', 'ruslan', 'natasha',
                    'thorsten', 'tux', 'gilles', 'lj', 'dilyara']
        self.voice_activ = BaseVoiceOptions(speakers=speakers, voice_file='voise.txt', voice_opt_file='opt.txt')
        f = open('voise.txt', 'w') # перезапись
        f.write(text) # записать в файл

    def onActivated(self, text):
        global txt
        txt = glob.glob('*.txt')
        #print(txt)
        f = open('opt.txt', 'w') # перезапись
        f.write(text) # записать в файл
       # set_opt() # обновить настройки
        #print(text)
        #self.pushButton.setText(text) # выбирает нужжный текст

    def dictor_start(self):
        if self.pushButton.isChecked():  # обработка нажатий кнопки-переключения
            #print("button pressed")
            self.start_thread() # открыть поток
        else:
            #print("button released")
            # закрыть поток
            self.stop_thread()


    def stop_thread(self):
        self.th.stop()



    def start_thread(self):
        self.th = thread(2)
        #self.connect(self.th, SIGNAL('loop()'), lambda x=2: self.loopfunction(x), Qt.AutoConnection)
        self.th.setTerminationEnabled(True)
        self.th.start()

class thread(QThread): # создание и фукции потока
    loop = pyqtSignal(object)

    def __init__(self, x):
        QThread.__init__(self)
        self.x = x

    def run(self): # запуск потока
        speakers = ['aidar', 'baya', 'kseniya', 'irina', 'ruslan', 'natasha',
                    'thorsten', 'tux', 'gilles', 'lj', 'dilyara']
        self.Dictor = RunApp(speakers=speakers,voice_file='voise.txt',voice_opt_file='opt.txt',img="tesseract_mask.png",lang='rus', pytesseract_config=r'--oem 3  --psm 4 tessedit_char_whitelist=абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ',time_replay='Время повтора', min_speed='Минималья скорость', max_speed='Максимальная скорость',min_volume='Минимальная громкость', max_volume='Максимальная громкость') # паралельная функция

    def stop(self):
        #print('stop')
        self.terminate()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('Fusion') # установить стиль приложения
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
